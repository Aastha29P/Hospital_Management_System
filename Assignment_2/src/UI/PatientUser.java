/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import system.Encounter1;
import system.Hospital;
import system.Patient;
import system.encounterHistory;
import system.hospitalDirectory;
import system.patientDirectory;
import system.vitalSHistory;
import system.vitalSigns;


public class PatientUser extends javax.swing.JPanel {

    encounterHistory encHistory;
    vitalSHistory vsHistory;
    Patient patient;
    patientDirectory patientHistory;
    hospitalDirectory hospHistory;
    public PatientUser(encounterHistory encHistory, vitalSHistory vsHistory, patientDirectory patientHistory, Patient patient, hospitalDirectory hospHistory) {
        initComponents();
        this.encHistory = encHistory;
        this.vsHistory = vsHistory;
        this.patientHistory= patientHistory;
        this.patient = patient;
        this.hospHistory = hospHistory;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ETable = new javax.swing.JTable();
        Title1 = new javax.swing.JLabel();
        txtPatFName = new javax.swing.JTextField();
        lbPatLName = new javax.swing.JLabel();
        txtPatLName = new javax.swing.JTextField();
        lbPatPhone = new javax.swing.JLabel();
        txtPatPhone = new javax.swing.JTextField();
        lbAge = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        lbPatGen = new javax.swing.JLabel();
        txtPatGen = new javax.swing.JTextField();
        lbDob = new javax.swing.JLabel();
        txtDob = new javax.swing.JTextField();
        lbHeight = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PTable = new javax.swing.JTable();
        txtHeight = new javax.swing.JTextField();
        lbWeight = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        lbHouse = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        txtHouse = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        lbPatId = new javax.swing.JLabel();
        lbPatCommunity = new javax.swing.JLabel();
        txtPatId = new javax.swing.JTextField();
        lbPatFName = new javax.swing.JLabel();
        txtPatCommunity = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        SearchPatId = new javax.swing.JTextField();
        Title2 = new javax.swing.JLabel();
        txtnearBy = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Tnb = new javax.swing.JTable();
        btnSearchNB = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));

        Title.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        Title.setForeground(new java.awt.Color(255, 255, 255));
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("Encounter Details");

        ETable.setBackground(java.awt.SystemColor.controlHighlight);
        ETable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Id", "Report Id", "Doctor Id", "Doctor Name", "Patient Name", "Hospital Id", "Hospital Name", "Date", "Body Temperature", "Pulse Rate", "Respiration Rate", "BP"
            }
        ));
        jScrollPane1.setViewportView(ETable);

        Title1.setFont(new java.awt.Font("Century", 1, 24)); // NOI18N
        Title1.setForeground(new java.awt.Color(0, 204, 255));
        Title1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title1.setText("Patient Portal");

        txtPatFName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatFNameActionPerformed(evt);
            }
        });

        lbPatLName.setForeground(new java.awt.Color(255, 255, 255));
        lbPatLName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPatLName.setText("Last Name");

        txtPatLName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatLNameActionPerformed(evt);
            }
        });

        lbPatPhone.setForeground(new java.awt.Color(255, 255, 255));
        lbPatPhone.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPatPhone.setText("Phone");

        txtPatPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatPhoneActionPerformed(evt);
            }
        });

        lbAge.setForeground(new java.awt.Color(255, 255, 255));
        lbAge.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbAge.setText("Age");

        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });

        lbPatGen.setForeground(new java.awt.Color(255, 255, 255));
        lbPatGen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPatGen.setText("Gender");

        txtPatGen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatGenActionPerformed(evt);
            }
        });

        lbDob.setForeground(new java.awt.Color(255, 255, 255));
        lbDob.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbDob.setText("Date of Birth");

        txtDob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDobActionPerformed(evt);
            }
        });

        lbHeight.setForeground(new java.awt.Color(255, 255, 255));
        lbHeight.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbHeight.setText("Height");

        PTable.setBackground(java.awt.SystemColor.controlHighlight);
        PTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "First Name", "Last Name", "Phone", "Age", "Gender", "Date of Birth", "Height", "Weight", "House", "Community"
            }
        ));
        jScrollPane2.setViewportView(PTable);

        txtHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHeightActionPerformed(evt);
            }
        });

        lbWeight.setForeground(new java.awt.Color(255, 255, 255));
        lbWeight.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbWeight.setText("Weight");

        txtWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWeightActionPerformed(evt);
            }
        });

        lbHouse.setForeground(new java.awt.Color(255, 255, 255));
        lbHouse.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbHouse.setText("House");

        btnUpdate.setBackground(new java.awt.Color(204, 204, 204));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHouseActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(204, 204, 204));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lbPatId.setForeground(new java.awt.Color(255, 255, 255));
        lbPatId.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPatId.setText(" Id");

        lbPatCommunity.setForeground(new java.awt.Color(255, 255, 255));
        lbPatCommunity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPatCommunity.setText("Community");

        lbPatFName.setForeground(new java.awt.Color(255, 255, 255));
        lbPatFName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPatFName.setText("First Name");

        txtPatCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatCommunityActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Search by Patient Id: ");

        SearchPatId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchPatIdActionPerformed(evt);
            }
        });

        Title2.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        Title2.setForeground(new java.awt.Color(255, 255, 255));
        Title2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title2.setText("Patient Details");

        txtnearBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnearByActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Near City");

        Tnb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Doctor Name", "Hospital"
            }
        ));
        jScrollPane3.setViewportView(Tnb);

        btnSearchNB.setText("Search");
        btnSearchNB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchNBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Title, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(114, 114, 114)
                                        .addComponent(btnUpdate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDelete))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lbHouse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbWeight, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbHeight, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbPatGen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbPatId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbPatFName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbPatLName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbPatPhone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbDob, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lbPatCommunity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(33, 33, 33)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtPatId)
                                            .addComponent(txtPatFName)
                                            .addComponent(txtPatLName)
                                            .addComponent(txtPatPhone)
                                            .addComponent(txtAge)
                                            .addComponent(txtPatGen)
                                            .addComponent(txtDob)
                                            .addComponent(txtHeight)
                                            .addComponent(txtWeight)
                                            .addComponent(txtHouse)
                                            .addComponent(txtPatCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(118, 118, 118)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(41, 41, 41)
                                        .addComponent(txtnearBy, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnSearchNB))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(47, 47, 47)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 931, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(SearchPatId, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(btnSearch)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Title2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(26, 26, 26))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(Title1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchPatId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnSearch))
                .addGap(33, 33, 33)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(Title2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPatId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPatId, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPatFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPatFName, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtnearBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(btnSearchNB))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPatLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPatLName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPatPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPatPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbAge, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbPatGen, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPatGen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDob, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtHeight)
                            .addComponent(lbHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtWeight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbPatCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPatCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(179, 179, 179))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(Title1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(947, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtPatFNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatFNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatFNameActionPerformed

    private void txtPatLNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatLNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatLNameActionPerformed

    private void txtPatPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatPhoneActionPerformed

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    private void txtPatGenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatGenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatGenActionPerformed

    private void txtDobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDobActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDobActionPerformed

    private void txtHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHeightActionPerformed

    private void txtWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWeightActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        boolean isValid = Validation();
        if (isValid) {
            int selectedRowIndex = PTable.getSelectedRow();
            if (selectedRowIndex < 0) {
                JOptionPane.showMessageDialog(this, "Please select a row to update");
                return;
            }

            DefaultTableModel model = (DefaultTableModel) PTable.getModel();
            Patient selectedPatient = (Patient) model.getValueAt(selectedRowIndex, 0);

            int patId = Integer.parseInt(txtPatId.getText());
            String firstName = txtPatFName.getText();
            String lastName = txtPatLName.getText();
            String patPhone = txtPatPhone.getText();
            int age = Integer.parseInt(txtAge.getText());
            String gender = txtPatGen.getText();
            String dob = txtDob.getText();
            int height = Integer.parseInt(txtHeight.getText());
            int weight = Integer.parseInt(txtWeight.getText());
            String house = txtHouse.getText();
            String pcommunity = txtPatCommunity.getText();

            JOptionPane.showMessageDialog(this, "Employee Information Updated");
            //history.deleteEmployee(selectedEmployee);
            selectedPatient.setPatId(patId);
            selectedPatient.setFirstName(firstName);
            selectedPatient.setLastName(lastName);
            selectedPatient.setPatPhone(patPhone);
            selectedPatient.setAge(age);
            selectedPatient.setGender(gender);
            selectedPatient.setDob(dob);
            selectedPatient.setHeight(height);
            selectedPatient.setWeight(weight);
            selectedPatient.setHouse(house);

           
            txtPatId.setText("");
            txtPatFName.setText("");
            txtPatLName.setText("");
            txtPatPhone.setText("");
            txtAge.setText("");
            txtPatGen.setText("");
            txtDob.setText("");
            txtHeight.setText("");
            txtWeight.setText("");
            txtHouse.setText("");
            txtPatCommunity.setText("");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHouseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHouseActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = PTable.getSelectedRow();

        if (selectedRowIndex<0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) PTable.getModel();
        Patient selectedPatient = (Patient)model.getValueAt(selectedRowIndex, 0);

        patientHistory.deletePatient(selectedPatient);
        JOptionPane.showMessageDialog(this, "Employee deleted");

       
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtPatCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatCommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatCommunityActionPerformed

    private void SearchPatIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchPatIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchPatIdActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) PTable.getModel();

        model.setRowCount(0);
        boolean isPresent = false;

        ArrayList<Patient> pat = patientHistory.getPatientHistory();

        //String cbSearchType = cbSearch.getSelectedItem().toString();
        String txtValue = SearchPatId.getText();

        if (txtValue.equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter in the Search box");
            return;
        }

        ArrayList<Patient> empData = new ArrayList<>();

        for (Patient pDetails : pat) {

            if (Integer.parseInt(txtValue) == pDetails.getPatId()) {
                empData.add(pDetails);
                isPresent = true;
            }
        }

        for (Patient patientHistory : empData) {
            Object[] row = new Object[13];
                row[0] = patientHistory;
                row[1] = patientHistory.getFirstName();
                row[2] = patientHistory.getLastName();
                row[3] = patientHistory.getPatPhone();
                row[4] = patientHistory.getAge();
                row[5] = patientHistory.getGender();
                row[6] = patientHistory.getDob();
                row[7] = patientHistory.getHeight();
                row[8] = patientHistory.getWeight();
                row[9] = patientHistory.getHouse();
                row[10] = patientHistory.getCommunity();
                row[11] = patientHistory.getCity();

            model.addRow(row);

        }

        if (isPresent == false) {
            JOptionPane.showMessageDialog(null, "No Records found");
            //tbSearch.size();
            return;
        }
        
        
        //Encounter History of Patient 
        DefaultTableModel modelEnc = (DefaultTableModel) ETable.getModel();

        modelEnc.setRowCount(0);
        boolean isEncPresent = false;

        ArrayList<Encounter1> enc = encHistory.getEncounterHistory();

        //String cbSearchType = cbSearch.getSelectedItem().toString();
        //txtValue = searchTxt.getText();

        if (txtValue.equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter in the Search box");
            return;
        }

        ArrayList<Encounter1> encData = new ArrayList<>();

        for (Encounter1 eDetails : enc) {

            if (Integer.parseInt(txtValue)==eDetails.getPatId()) {
                encData.add(eDetails);
                isEncPresent = true;
            }
        }

        for (Encounter1 encHistory : encData) {
            Object[] row = new Object[12];
                row[0] = encHistory;
                row[1] = encHistory.getRepId();
                row[2] = encHistory.getDocId();
                row[3] = encHistory.getDocName();
                row[4] = encHistory.getPatName();
                row[5] = encHistory.getHospId();
                row[6] = encHistory.getHospName();
                row[7] = encHistory.getDate();
            
            for(vitalSigns v: vsHistory.getVsHistory()){
                row[8] = v.getBodyTemp();
                row[9] = v.getPulseRate();
                row[10] = v.getRespRate();
                row[11] = v.getbP();
            }
//            row[1] = patientDetails.getPatientName();
//            row[2] = patientDetails.getPatientAge();
//            row[3] = patientDetails.getPatientPhoneNo();
//            row[4] = patientDetails.getPatientSex();

            modelEnc.addRow(row);

        }

        if (isEncPresent == false) {
            JOptionPane.showMessageDialog(null, "No Records found");
            //tbSearch.size();
            return;
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtnearByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnearByActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnearByActionPerformed

    private void btnSearchNBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchNBActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelNearby = (DefaultTableModel) Tnb.getModel();

        modelNearby.setRowCount(0);
        boolean isPresent = false;

//        ArrayList<Patient> pat = pHistory.getPatientData();
          ArrayList<Hospital> hosp = hospHistory.getHospitalHistory();

        //String cbSearchType = cbSearch.getSelectedItem().toString();
        String txtValue = txtnearBy.getText();

        if (txtValue.equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter in the Search box");
            return;
        }

        ArrayList<Hospital> hoData = new ArrayList<>();

        for (Hospital hospDetails : hosp) {

            if (txtValue.equals(hospDetails.getCity())) {
                hoData.add(hospDetails);
                isPresent = true;
            }
        }

        for (Hospital ho : hoData) {
            Object[] row = new Object[2];
            row[0] = ho.getDocName();
            row[1] = ho.getHospName();

            modelNearby.addRow(row);

        }

        if (isPresent == false) {
            JOptionPane.showMessageDialog(null, "No Records found");
            //tbSearch.size();
            return;
        }
    }//GEN-LAST:event_btnSearchNBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ETable;
    private javax.swing.JTable PTable;
    private javax.swing.JTextField SearchPatId;
    private javax.swing.JLabel Title;
    private javax.swing.JLabel Title1;
    private javax.swing.JLabel Title2;
    private javax.swing.JTable Tnb;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchNB;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbAge;
    private javax.swing.JLabel lbDob;
    private javax.swing.JLabel lbHeight;
    private javax.swing.JLabel lbHouse;
    private javax.swing.JLabel lbPatCommunity;
    private javax.swing.JLabel lbPatFName;
    private javax.swing.JLabel lbPatGen;
    private javax.swing.JLabel lbPatId;
    private javax.swing.JLabel lbPatLName;
    private javax.swing.JLabel lbPatPhone;
    private javax.swing.JLabel lbWeight;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtDob;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtHouse;
    private javax.swing.JTextField txtPatCommunity;
    private javax.swing.JTextField txtPatFName;
    private javax.swing.JTextField txtPatGen;
    private javax.swing.JTextField txtPatId;
    private javax.swing.JTextField txtPatLName;
    private javax.swing.JTextField txtPatPhone;
    private javax.swing.JTextField txtWeight;
    private javax.swing.JTextField txtnearBy;
    // End of variables declaration//GEN-END:variables

           
    private boolean Validation() {
        
        if (txtPatId.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Patient ID");
            return false;
        } else {
            if (txtPatId.getText().length() != 4) {
                JOptionPane.showMessageDialog(this, "Patient ID should be only 4 digits");
                return false;
            }
        }
        try {
        Integer.parseInt(txtPatId.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter a numerical value for Id");
            
        }
        
        if (txtPatFName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Patient First Name");
            return false;
        } else {
            if (!(txtPatFName.getText().matches("[a-zA-Z]"))) {
                JOptionPane.showMessageDialog(this, "Please enter Valid Patient First Name");
                return false;
            }
        }
        
        if (txtPatLName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Patient Last Name");
            return false;
        } else {
            if (!(txtPatLName.getText().matches("[a-zA-Z]"))) {
                JOptionPane.showMessageDialog(this, "Please enter Valid Patient Last Name");
                return false;
            }
        }
        
        if (txtPatPhone.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Patient Phone Number");
            return false;
        } else {
            if (!(txtPatPhone.getText().matches("\\d{10}|(?:\\d{3}-){2}\\d{4}|\\(\\d{3}\\)\\d{3}-?\\d{4}"))) {
                JOptionPane.showMessageDialog(this, "Please enter Valid Patient Phone Number(10 digits)");
                return false;
            }
        }
        
        try {
        Integer.parseInt(txtAge.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter a numerical value for Age");
            
        }
        
        if (txtAge.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Patient Age");
            return false;
        }
     
            
        if (txtPatGen.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Patient Gender");
            return false;
        }
            else{
            if(!(txtPatGen.getText().matches("[a-zA-Z]*[\\s]{1}[a-zA-Z].*"))){
                JOptionPane.showMessageDialog(this, "Please enter valid gender");
                return false;
            }
        }    
        
        if (txtDob.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Patient DOB");
            return false;
        } else {
            if (!(txtDob.getText().matches("^(1[0-2]|0[1-9])/(3[01]|[12][0-9]|0[1-9])/[0-9]{4}$"))) {
                JOptionPane.showMessageDialog(this, "Please enter Date Format mm/dd/yyyy");
                return false;
            }
        }
        
        if (txtHeight.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Patient Height");
            return false;
        }
        
        try {
        Integer.parseInt(txtHeight.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter a numerical value for Height");
            
        }
        
        if (txtWeight.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Patient Weight");
            return false;
        }
        
        try {
        Integer.parseInt(txtWeight.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter a numerical value for Weight");
            
        }
        if (txtHouse.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Patient House");
            return false;
        }
            else{
            if(!(txtHouse.getText().matches("[a-zA-Z]*[\\s]{1}[a-zA-Z].*"))){
                JOptionPane.showMessageDialog(this, "Please enter valid House");
                return false;
            }
        } 
        
        if (txtPatCommunity.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Patient Community");
            return false;
        }
            else{
            if(!(txtPatCommunity.getText().matches("[a-zA-Z]*[\\s]{1}[a-zA-Z].*"))){
                JOptionPane.showMessageDialog(this, "Please enter valid Community");
                return false;
            }
        } 
        
       
        return true;
    } 
}
